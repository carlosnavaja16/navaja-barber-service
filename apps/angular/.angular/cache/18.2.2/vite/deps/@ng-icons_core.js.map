{
  "version": 3,
  "sources": ["../../../../../../../node_modules/@ng-icons/core/fesm2022/ng-icons-core.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Optional, SkipSelf, Injector, ElementRef, runInInjectionContext, Component, ChangeDetectionStrategy, Input, HostBinding, NgModule, Inject } from '@angular/core';\nimport { isObservable, firstValueFrom } from 'rxjs';\nconst NgIconConfigToken = new InjectionToken('Ng Icon Config');\nconst defaultConfig = {\n  size: '1em'\n};\n/**\n * Provide the configuration for the icons\n * @param config The configuration to use\n */\nfunction provideNgIconsConfig(config) {\n  return {\n    provide: NgIconConfigToken,\n    useValue: {\n      ...defaultConfig,\n      ...config\n    }\n  };\n}\n/**\n * Inject the configuration for the icons\n * @returns The configuration to use\n * @internal\n */\nfunction injectNgIconConfig() {\n  return inject(NgIconConfigToken, {\n    optional: true\n  }) ?? defaultConfig;\n}\nconst NgIconLoaderToken = new InjectionToken('Ng Icon Loader Token');\n/**\n * Helper function to create an object that represents a Loader feature.\n */\nfunction loaderFeature(kind, providers) {\n  return {\n    kind: kind,\n    providers: providers\n  };\n}\nconst NgIconCacheToken = new InjectionToken('Ng Icon Cache Token');\n/**\n * Add caching to the loader. This will prevent the loader from being called multiple times for the same icon name.\n */\nfunction withCaching() {\n  return loaderFeature(0 /* NgIconLoaderFeatureKind.CachingFeature */, [{\n    provide: NgIconCacheToken,\n    useValue: new Map()\n  }]);\n}\n/**\n * Provide a function that will return the SVG content for a given icon name.\n * @param loader The function that will return the SVG content for a given icon name.\n * @param features The list of features to apply to the loader.\n * @returns The SVG content for a given icon name.\n */\nfunction provideNgIconLoader(loader, ...features) {\n  return [{\n    provide: NgIconLoaderToken,\n    useValue: loader\n  }, features.map(feature => feature.providers)];\n}\n/**\n * Inject the function that will return the SVG content for a given icon name.\n */\nfunction injectNgIconLoader() {\n  return inject(NgIconLoaderToken, {\n    optional: true\n  });\n}\n/**\n * Inject the cache that will store the SVG content for a given icon name.\n */\nfunction injectNgIconLoaderCache() {\n  return inject(NgIconCacheToken, {\n    optional: true\n  });\n}\n\n/**\n * Define the icons to use\n * @param icons The icons to provide\n */\nfunction provideIcons(icons) {\n  return [{\n    provide: NgIconsToken,\n    useFactory: parentIcons => ({\n      ...parentIcons?.reduce((acc, icons) => ({\n        ...acc,\n        ...icons\n      }), {}),\n      ...icons\n    }),\n    deps: [[NgIconsToken, new Optional(), new SkipSelf()]],\n    multi: true\n  }];\n}\nconst NgIconsToken = new InjectionToken('Icons Token');\n/**\n * Inject the icons to use\n * @returns The icons to use\n * @internal\n */\nfunction injectNgIcons() {\n  return inject(NgIconsToken, {\n    optional: true\n  }) ?? [];\n}\n\n/**\n * A loader may return a promise, an observable or a string. This function will coerce the result into a promise.\n * @returns\n */\nfunction coerceLoaderResult(result) {\n  if (typeof result === 'string') {\n    return Promise.resolve(result);\n  }\n  if (isObservable(result)) {\n    return firstValueFrom(result);\n  }\n  return result;\n}\n\n/**\n * Hyphenated to lowerCamelCase\n */\nfunction toPropertyName(str) {\n  return str.replace(/([^a-zA-Z0-9])+(.)?/g, (_, __, chr) => chr ? chr.toUpperCase() : '').replace(/[^a-zA-Z\\d]/g, '').replace(/^([A-Z])/, m => m.toLowerCase());\n}\nclass NgIcon {\n  constructor() {\n    /** Access the global icon config */\n    this.config = injectNgIconConfig();\n    /** Access the icons */\n    this.icons = injectNgIcons();\n    /** Access the icon loader if defined */\n    this.loader = injectNgIconLoader();\n    /** Access the icon loader cache if defined */\n    this.cache = injectNgIconLoaderCache();\n    /** Access the injector */\n    this.injector = inject(Injector);\n    /** Access the element ref */\n    this.elementRef = inject(ElementRef);\n    this._size = this.config.size;\n    /** Define the color of the icon */\n    this.color = this.config.color;\n  }\n  /** Define the name of the icon to display */\n  set name(name) {\n    this.setIcon(name);\n  }\n  /** Define the size of the icon */\n  set size(size) {\n    // if the size only contains numbers, assume it is in pixels\n    this._size = coerceCssPixelValue(size);\n  }\n  get size() {\n    return this._size;\n  }\n  /**\n   * Load the icon with the given name and insert it into the template.\n   * @param name The name of the icon to load.\n   */\n  async setIcon(name) {\n    const propertyName = toPropertyName(name);\n    for (const icons of [...this.icons].reverse()) {\n      if (icons[propertyName]) {\n        // insert the SVG into the template\n        this.elementRef.nativeElement.innerHTML = icons[propertyName];\n        return;\n      }\n    }\n    // if we have a cache check if the icon is already loaded\n    if (this.cache?.has(name)) {\n      this.elementRef.nativeElement.innerHTML = this.cache.get(name);\n      return;\n    }\n    // if there is a loader defined, use it to load the icon\n    if (this.loader) {\n      const result = await this.requestIconFromLoader(name);\n      // if the result is a string, insert the SVG into the template\n      if (result !== null) {\n        // if we have a cache, store the result\n        this.cache?.set(name, result);\n        this.elementRef.nativeElement.innerHTML = result;\n        return;\n      }\n    }\n    // if there is no icon with this name warn the user as they probably forgot to import it\n    console.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);\n  }\n  /**\n   * Request the icon from the loader.\n   * @param name The name of the icon to load.\n   * @returns The SVG content for a given icon name.\n   */\n  requestIconFromLoader(name) {\n    return new Promise(resolve => {\n      runInInjectionContext(this.injector, async () => {\n        const result = await coerceLoaderResult(this.loader(name));\n        resolve(result);\n      });\n    });\n  }\n  static {\n    this.ɵfac = function NgIcon_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIcon)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgIcon,\n      selectors: [[\"ng-icon\"]],\n      hostVars: 6,\n      hostBindings: function NgIcon_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"--ng-icon__size\", ctx.size)(\"--ng-icon__stroke-width\", ctx.strokeWidth)(\"color\", ctx.color);\n        }\n      },\n      inputs: {\n        name: \"name\",\n        size: \"size\",\n        strokeWidth: \"strokeWidth\",\n        color: \"color\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function NgIcon_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size)}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIcon, [{\n    type: Component,\n    args: [{\n      selector: 'ng-icon',\n      template: '',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size)}\\n\"]\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    size: [{\n      type: HostBinding,\n      args: ['style.--ng-icon__size']\n    }, {\n      type: Input\n    }],\n    strokeWidth: [{\n      type: HostBinding,\n      args: ['style.--ng-icon__stroke-width']\n    }, {\n      type: Input\n    }],\n    color: [{\n      type: HostBinding,\n      args: ['style.color']\n    }, {\n      type: Input\n    }]\n  });\n})();\nfunction coerceCssPixelValue(value) {\n  return value == null ? '' : /^\\d+$/.test(value) ? `${value}px` : value;\n}\nclass NgIconsModule {\n  constructor(icons) {\n    if (Object.keys(icons).length === 0) {\n      throw new Error('No icons have been provided. Ensure to include some icons by importing them using NgIconsModule.withIcons({ ... }).');\n    }\n  }\n  /**\n   * Define the icons that will be included in the application. This allows unused icons to\n   * be tree-shaken away to reduce bundle size\n   * @param icons The object containing the required icons\n   */\n  static withIcons(icons) {\n    return {\n      ngModule: NgIconsModule,\n      providers: provideIcons(icons)\n    };\n  }\n  static {\n    this.ɵfac = function NgIconsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIconsModule)(i0.ɵɵinject(NgIconsToken));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgIconsModule,\n      imports: [NgIcon],\n      exports: [NgIcon]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIconsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgIcon],\n      exports: [NgIcon]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NgIconsToken]\n      }]\n    }];\n  }, null);\n})();\nconst NG_ICON_DIRECTIVES = [NgIcon];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_ICON_DIRECTIVES, NgIcon, NgIconCacheToken, NgIcon as NgIconComponent, NgIconConfigToken, NgIconLoaderToken, NgIconsModule, NgIconsToken, injectNgIconConfig, injectNgIconLoader, injectNgIconLoaderCache, injectNgIcons, provideIcons, provideNgIconLoader, provideNgIconsConfig, withCaching };\n"],
  "mappings": "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",
  "names": ["icons"]
}
