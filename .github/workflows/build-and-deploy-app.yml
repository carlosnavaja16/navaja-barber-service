name: Build and deploy app

on:
  push:
    branches: [main]

env:
  FIREBASE_TOKEN: ${{secrets.FIREBASE_TOKEN}}
  PROJECT_ID: barber-service-45e86 # Google Cloud project id
  GAR_LOCATION: us-east1 # TODO: update Artifact Registry location
  REPOSITORY: barber-service-repo # TODO: update Artifact Registry repository name
  SERVICE: barber-service # TODO: update Cloud Run service name
  REGION: us-east1 # TODO: update Cloud Run service region

jobs:
  build-and-deploy-firebase-functions:
    name: Build and deploy Firebase functions
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # The google service account credentials were written as an object in a .ts file.
      # the file was encoded in base64 and stored in a secret this all is to avoid problems
      # related to new line characters in the private key. Below we decode the base64 string
      # and reconstruct the credentials.ts file.
      - name: Decode Google service account credentials
        run: |
          echo ${{ secrets.CALENDAR_SERVICE_ACC_CREDENTIALS_BASE64 }} | base64 --decode > ./firebase-functions/credentials.ts

      - name: Install firebase functions dependencies
        if: success()
        run: cd ./firebase-functions && npm install && cd ../

      - name: Install Firebase CLI
        if: success()
        run: npm install -g firebase-tools@latest

      - name: Deploy Firebase functions
        run: firebase deploy --only functions

  build-and-deploy-angular-app:
    name: Build and deploy Angular app
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Angular app dependencies
        if: success()
        run: cd ./angular && npm install && cd ../

      - name: Build Angular app
        run: cd ./angular && npm run build --omit=dev && cd ../

      - name: Install Firebase CLI
        if: success()
        run: npm install -g firebase-tools@latest

      - name: Deploy to app Firebase hosting
        if: success()
        run: firebase deploy --only hosting

  build-and-deploy-trpc-server:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest" --platform linux/amd64 ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
